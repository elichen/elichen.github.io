-- Drop existing tables and policies
DROP TABLE IF EXISTS expense_splits CASCADE;
DROP TABLE IF EXISTS expenses CASCADE;
DROP TABLE IF EXISTS trip_participants CASCADE;
DROP TABLE IF EXISTS trips CASCADE;
DROP VIEW IF EXISTS user_profiles CASCADE;

-- Drop any existing problematic functions
DROP FUNCTION IF EXISTS find_user_by_email(TEXT) CASCADE;

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create trips table
CREATE TABLE trips (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    name TEXT NOT NULL,
    created_by UUID REFERENCES auth.users(id) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create trip_participants table
CREATE TABLE trip_participants (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    trip_id UUID REFERENCES trips(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UNIQUE(trip_id, user_id)
);

-- Create expenses table
CREATE TABLE expenses (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    trip_id UUID REFERENCES trips(id) ON DELETE CASCADE NOT NULL,
    paid_by UUID REFERENCES auth.users(id) NOT NULL,
    description TEXT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL CHECK (amount > 0),
    expense_date DATE DEFAULT CURRENT_DATE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create expense_splits table
CREATE TABLE expense_splits (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    expense_id UUID REFERENCES expenses(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    amount DECIMAL(10, 2) NOT NULL CHECK (amount > 0),
    UNIQUE(expense_id, user_id)
);

-- Create a view for user profiles (using auth.users email)
CREATE OR REPLACE VIEW user_profiles AS
SELECT 
    id,
    email,
    COALESCE(raw_user_meta_data->>'full_name', email) as name,
    raw_user_meta_data->>'avatar_url' as avatar_url
FROM auth.users;

-- Grant access to the view
GRANT SELECT ON user_profiles TO authenticated;
GRANT SELECT ON user_profiles TO anon;
GRANT SELECT ON user_profiles TO service_role;

-- Create indexes for better performance
CREATE INDEX idx_trip_participants_trip_id ON trip_participants(trip_id);
CREATE INDEX idx_trip_participants_user_id ON trip_participants(user_id);
CREATE INDEX idx_expenses_trip_id ON expenses(trip_id);
CREATE INDEX idx_expenses_paid_by ON expenses(paid_by);
CREATE INDEX idx_expenses_expense_date ON expenses(expense_date);
CREATE INDEX idx_expense_splits_expense_id ON expense_splits(expense_id);
CREATE INDEX idx_expense_splits_user_id ON expense_splits(user_id);

-- Enable Row Level Security
ALTER TABLE trips ENABLE ROW LEVEL SECURITY;
ALTER TABLE trip_participants ENABLE ROW LEVEL SECURITY;
ALTER TABLE expenses ENABLE ROW LEVEL SECURITY;
ALTER TABLE expense_splits ENABLE ROW LEVEL SECURITY;

-- Simplified RLS approach to avoid circular dependencies

-- For trips: allow authenticated users to see all trips
-- We'll handle filtering in the application layer
CREATE POLICY "Authenticated users can view trips" ON trips
    FOR SELECT
    USING (auth.role() = 'authenticated');

-- Authenticated users can create trips
CREATE POLICY "Users can create trips" ON trips
    FOR INSERT
    WITH CHECK (auth.uid() = created_by);

-- Users can update trips they created
CREATE POLICY "Users can update their own trips" ON trips
    FOR UPDATE
    USING (auth.uid() = created_by)
    WITH CHECK (auth.uid() = created_by);

-- Users can delete trips they created
CREATE POLICY "Users can delete their own trips" ON trips
    FOR DELETE
    USING (auth.uid() = created_by);

-- For trip_participants: authenticated users can see all
CREATE POLICY "Authenticated users can view participants" ON trip_participants
    FOR SELECT
    USING (auth.role() = 'authenticated');

-- Authenticated users can add participants
CREATE POLICY "Authenticated users can add participants" ON trip_participants
    FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

-- RLS Policies for expenses
-- Users can see all expenses in trips they're part of
CREATE POLICY "Users can view expenses in their trips" ON expenses
    FOR SELECT
    USING (
        trip_id IN (
            SELECT trip_id 
            FROM trip_participants 
            WHERE user_id = auth.uid()
        )
    );

-- Users can create expenses in trips they're part of
CREATE POLICY "Trip members can create expenses" ON expenses
    FOR INSERT
    WITH CHECK (
        auth.uid() = paid_by 
        AND trip_id IN (
            SELECT trip_id 
            FROM trip_participants 
            WHERE user_id = auth.uid()
        )
    );

-- Users can only update their own expenses
CREATE POLICY "Users can update their own expenses" ON expenses
    FOR UPDATE
    USING (auth.uid() = paid_by)
    WITH CHECK (auth.uid() = paid_by);

-- Users can only delete their own expenses
CREATE POLICY "Users can delete their own expenses" ON expenses
    FOR DELETE
    USING (auth.uid() = paid_by);

-- RLS Policies for expense_splits
-- Users can see splits for expenses in their trips
CREATE POLICY "Users can view expense splits in their trips" ON expense_splits
    FOR SELECT
    USING (
        expense_id IN (
            SELECT e.id 
            FROM expenses e
            JOIN trip_participants tp ON e.trip_id = tp.trip_id
            WHERE tp.user_id = auth.uid()
        )
    );

-- Users can manage splits for expenses they created
CREATE POLICY "Users can manage splits for their expenses" ON expense_splits
    FOR ALL
    USING (
        expense_id IN (
            SELECT id 
            FROM expenses 
            WHERE paid_by = auth.uid()
        )
    );


-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_trips_updated_at BEFORE UPDATE ON trips
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_expenses_updated_at BEFORE UPDATE ON expenses
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

